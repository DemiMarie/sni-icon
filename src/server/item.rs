// This code was autogenerated with `dbus-codegen-rust -r -i org.kde`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait StatusNotifierItem {
    fn context_menu(&mut self, x_: i32, y_: i32) -> Result<(), dbus::MethodErr>;
    fn activate(&mut self, x_: i32, y_: i32) -> Result<(), dbus::MethodErr>;
    fn secondary_activate(&mut self, x_: i32, y_: i32) -> Result<(), dbus::MethodErr>;
    fn scroll(&mut self, delta: i32, orientation: String) -> Result<(), dbus::MethodErr>;
    fn category(&self) -> Result<String, dbus::MethodErr>;
    fn id(&self) -> Result<String, dbus::MethodErr>;
    fn title(&self) -> Result<String, dbus::MethodErr>;
    fn status(&self) -> Result<String, dbus::MethodErr>;
    fn window_id(&self) -> Result<i32, dbus::MethodErr>;
    fn icon_theme_path(&self) -> Result<String, dbus::MethodErr>;
    fn menu(&self) -> Result<dbus::Path<'static>, dbus::MethodErr>;
    fn item_is_menu(&self) -> Result<bool, dbus::MethodErr>;
    fn icon_name(&self) -> Result<String, dbus::MethodErr>;
    fn icon_pixmap(&self) -> Result<Vec<(i32, i32, Vec<u8>)>, dbus::MethodErr>;
    fn overlay_icon_name(&self) -> Result<String, dbus::MethodErr>;
    fn overlay_icon_pixmap(&self) -> Result<Vec<(i32, i32, Vec<u8>)>, dbus::MethodErr>;
    fn attention_icon_name(&self) -> Result<String, dbus::MethodErr>;
    fn attention_icon_pixmap(&self) -> Result<Vec<(i32, i32, Vec<u8>)>, dbus::MethodErr>;
    fn attention_movie_name(&self) -> Result<String, dbus::MethodErr>;
    fn tool_tip(
        &self,
    ) -> Result<(String, Vec<(i32, i32, Vec<u8>)>, String, String), dbus::MethodErr>;
}

#[derive(Debug)]
pub struct StatusNotifierItemNewTitle {}

impl arg::AppendAll for StatusNotifierItemNewTitle {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewTitle {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewTitle {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewTitle {
    const NAME: &'static str = "NewTitle";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewIcon {}

impl arg::AppendAll for StatusNotifierItemNewIcon {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewIcon {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewIcon {
    const NAME: &'static str = "NewIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewAttentionIcon {}

impl arg::AppendAll for StatusNotifierItemNewAttentionIcon {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewAttentionIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewAttentionIcon {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewAttentionIcon {
    const NAME: &'static str = "NewAttentionIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewOverlayIcon {}

impl arg::AppendAll for StatusNotifierItemNewOverlayIcon {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewOverlayIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewOverlayIcon {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewOverlayIcon {
    const NAME: &'static str = "NewOverlayIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewToolTip {}

impl arg::AppendAll for StatusNotifierItemNewToolTip {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewToolTip {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewToolTip {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewToolTip {
    const NAME: &'static str = "NewToolTip";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewStatus {
    pub status: String,
}

impl arg::AppendAll for StatusNotifierItemNewStatus {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.status, i);
    }
}

impl arg::ReadAll for StatusNotifierItemNewStatus {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewStatus { status: i.read()? })
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewStatus {
    const NAME: &'static str = "NewStatus";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

pub fn register_status_notifier_item<T>(
    cr: &mut crossroads::Crossroads,
) -> crossroads::IfaceToken<T>
where
    T: StatusNotifierItem + Send + 'static,
{
    cr.register("org.kde.StatusNotifierItem", |b| {
        b.signal::<(), _>("NewTitle", ());
        b.signal::<(), _>("NewIcon", ());
        b.signal::<(), _>("NewAttentionIcon", ());
        b.signal::<(), _>("NewOverlayIcon", ());
        b.signal::<(), _>("NewToolTip", ());
        b.signal::<(String,), _>("NewStatus", ("status",));
        b.method("ContextMenu", ("x", "y"), (), |_, t: &mut T, (x, y)| {
            t.context_menu(x, y)
        });
        b.method("Activate", ("x", "y"), (), |_, t: &mut T, (x, y)| {
            t.activate(x, y)
        });
        b.method(
            "SecondaryActivate",
            ("x", "y"),
            (),
            |_, t: &mut T, (x, y)| t.secondary_activate(x, y),
        );
        b.method(
            "Scroll",
            ("delta", "orientation"),
            (),
            |_, t: &mut T, (delta, orientation)| t.scroll(delta, orientation),
        );
        b.property::<String, _>("Category").get(|_, t| t.category());
        b.property::<String, _>("Id").get(|_, t| t.id());
        b.property::<String, _>("Title").get(|_, t| t.title());
        b.property::<String, _>("Status").get(|_, t| t.status());
        b.property::<i32, _>("WindowId").get(|_, t| t.window_id());
        b.property::<String, _>("IconThemePath")
            .get(|_, t| t.icon_theme_path());
        b.property::<dbus::Path<'static>, _>("Menu")
            .get(|_, t| t.menu());
        b.property::<bool, _>("ItemIsMenu")
            .get(|_, t| t.item_is_menu());
        b.property::<String, _>("IconName")
            .get(|_, t| t.icon_name());
        b.property::<Vec<(i32, i32, Vec<u8>)>, _>("IconPixmap")
            .get(|_, t| t.icon_pixmap())
            .annotate("org.qtproject.QtDBus.QtTypeName", "IconPixmapList");
        b.property::<String, _>("OverlayIconName")
            .get(|_, t| t.overlay_icon_name());
        b.property::<Vec<(i32, i32, Vec<u8>)>, _>("OverlayIconPixmap")
            .get(|_, t| t.overlay_icon_pixmap())
            .annotate("org.qtproject.QtDBus.QtTypeName", "IconPixmapList");
        b.property::<String, _>("AttentionIconName")
            .get(|_, t| t.attention_icon_name());
        b.property::<Vec<(i32, i32, Vec<u8>)>, _>("AttentionIconPixmap")
            .get(|_, t| t.attention_icon_pixmap())
            .annotate("org.qtproject.QtDBus.QtTypeName", "IconPixmapList");
        b.property::<String, _>("AttentionMovieName")
            .get(|_, t| t.attention_movie_name());
        b.property::<(String, Vec<(i32, i32, Vec<u8>)>, String, String), _>("ToolTip")
            .get(|_, t| t.tool_tip())
            .annotate("org.qtproject.QtDBus.QtTypeName", "ToolTip");
    })
}
