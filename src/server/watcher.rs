// This code was autogenerated with `dbus-codegen-rust -r -i org.kde`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait StatusNotifierWatcher {
    fn register_status_notifier_item(&mut self, service: String) -> Result<(), dbus::MethodErr>;
    fn register_status_notifier_host(&mut self, service: String) -> Result<(), dbus::MethodErr>;
    fn registered_status_notifier_items(&self) -> Result<Vec<String>, dbus::MethodErr>;
    fn is_status_notifier_host_registered(&self) -> Result<bool, dbus::MethodErr>;
    fn protocol_version(&self) -> Result<i32, dbus::MethodErr>;
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierItemRegistered {
    pub arg0: String,
}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierItemRegistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierItemRegistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierItemRegistered { arg0: i.read()? })
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierItemRegistered {
    const NAME: &'static str = "StatusNotifierItemRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierItemUnregistered {
    pub arg0: String,
}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierItemUnregistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierItemUnregistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierItemUnregistered { arg0: i.read()? })
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierItemUnregistered {
    const NAME: &'static str = "StatusNotifierItemUnregistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierHostRegistered {}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierHostRegistered {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierHostRegistered {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierHostRegistered {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierHostRegistered {
    const NAME: &'static str = "StatusNotifierHostRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierHostUnregistered {}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierHostUnregistered {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierHostUnregistered {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierHostUnregistered {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierHostUnregistered {
    const NAME: &'static str = "StatusNotifierHostUnregistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

pub fn register_status_notifier_watcher<T>(
    cr: &mut crossroads::Crossroads,
) -> crossroads::IfaceToken<T>
where
    T: StatusNotifierWatcher + Send + 'static,
{
    cr.register("org.kde.StatusNotifierWatcher", |b| {
        b.signal::<(String,), _>("StatusNotifierItemRegistered", ("",));
        b.signal::<(String,), _>("StatusNotifierItemUnregistered", ("",));
        b.signal::<(), _>("StatusNotifierHostRegistered", ());
        b.signal::<(), _>("StatusNotifierHostUnregistered", ());
        b.method(
            "RegisterStatusNotifierItem",
            ("service",),
            (),
            |_, t: &mut T, (service,)| t.register_status_notifier_item(service),
        );
        b.method(
            "RegisterStatusNotifierHost",
            ("service",),
            (),
            |_, t: &mut T, (service,)| t.register_status_notifier_host(service),
        );
        b.property::<Vec<String>, _>("RegisteredStatusNotifierItems")
            .get(|_, t| t.registered_status_notifier_items())
            .annotate("org.qtproject.QtDBus.QtTypeName.Out0", "QStringList");
        b.property::<bool, _>("IsStatusNotifierHostRegistered")
            .get(|_, t| t.is_status_notifier_host_registered());
        b.property::<i32, _>("ProtocolVersion")
            .get(|_, t| t.protocol_version());
    })
}
