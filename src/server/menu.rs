// This code was autogenerated with `dbus-codegen-rust -r --file=./dbus-menu.xml --skipprefix=com.canonical --output ./src/server/menu.rs`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait Dbusmenu {
    fn get_layout(
        &mut self,
        parent_id: i32,
        recursion_depth: i32,
        property_names: Vec<String>,
    ) -> Result<
        (
            u32,
            (
                i32,
                arg::PropMap,
                Vec<arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            ),
        ),
        dbus::MethodErr,
    >;
    fn get_group_properties(
        &mut self,
        ids: Vec<i32>,
        property_names: Vec<String>,
    ) -> Result<Vec<(i32, arg::PropMap)>, dbus::MethodErr>;
    fn get_property(
        &mut self,
        id: i32,
        name: String,
    ) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::MethodErr>;
    fn event(
        &mut self,
        id: i32,
        event_id: String,
        data: arg::Variant<Box<dyn arg::RefArg + 'static>>,
        timestamp: u32,
    ) -> Result<(), dbus::MethodErr>;
    fn event_group(
        &mut self,
        events: Vec<(
            i32,
            String,
            arg::Variant<Box<dyn arg::RefArg + 'static>>,
            u32,
        )>,
    ) -> Result<Vec<i32>, dbus::MethodErr>;
    fn about_to_show(&mut self, id: i32) -> Result<bool, dbus::MethodErr>;
    fn about_to_show_group(
        &mut self,
        ids: Vec<i32>,
    ) -> Result<(Vec<i32>, Vec<i32>), dbus::MethodErr>;
    fn version(&self) -> Result<u32, dbus::MethodErr>;
    fn text_direction(&self) -> Result<String, dbus::MethodErr>;
    fn status(&self) -> Result<String, dbus::MethodErr>;
    fn icon_theme_path(&self) -> Result<Vec<String>, dbus::MethodErr>;
}

#[derive(Debug)]
pub struct DbusmenuItemsPropertiesUpdated {
    pub updated_props: Vec<(i32, arg::PropMap)>,
    pub removed_props: Vec<(i32, Vec<String>)>,
}

impl arg::AppendAll for DbusmenuItemsPropertiesUpdated {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.updated_props, i);
        arg::RefArg::append(&self.removed_props, i);
    }
}

impl arg::ReadAll for DbusmenuItemsPropertiesUpdated {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DbusmenuItemsPropertiesUpdated {
            updated_props: i.read()?,
            removed_props: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DbusmenuItemsPropertiesUpdated {
    const NAME: &'static str = "ItemsPropertiesUpdated";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

#[derive(Debug)]
pub struct DbusmenuLayoutUpdated {
    pub revision: u32,
    pub parent: i32,
}

impl arg::AppendAll for DbusmenuLayoutUpdated {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.revision, i);
        arg::RefArg::append(&self.parent, i);
    }
}

impl arg::ReadAll for DbusmenuLayoutUpdated {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DbusmenuLayoutUpdated {
            revision: i.read()?,
            parent: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DbusmenuLayoutUpdated {
    const NAME: &'static str = "LayoutUpdated";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

#[derive(Debug)]
pub struct DbusmenuItemActivationRequested {
    pub id: i32,
    pub timestamp: u32,
}

impl arg::AppendAll for DbusmenuItemActivationRequested {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.id, i);
        arg::RefArg::append(&self.timestamp, i);
    }
}

impl arg::ReadAll for DbusmenuItemActivationRequested {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DbusmenuItemActivationRequested {
            id: i.read()?,
            timestamp: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DbusmenuItemActivationRequested {
    const NAME: &'static str = "ItemActivationRequested";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

pub fn register_dbusmenu<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where
    T: Dbusmenu + Send + 'static,
{
    cr.register("com.canonical.dbusmenu", |b| {
        b.signal::<(Vec<(i32, arg::PropMap)>, Vec<(i32, Vec<String>)>), _>(
            "ItemsPropertiesUpdated",
            ("updatedProps", "removedProps"),
        );
        b.signal::<(u32, i32), _>("LayoutUpdated", ("revision", "parent"));
        b.signal::<(i32, u32), _>("ItemActivationRequested", ("id", "timestamp"));
        b.method(
            "GetLayout",
            ("parentId", "recursionDepth", "propertyNames"),
            ("revision", "layout"),
            |_, t: &mut T, (parentId, recursionDepth, propertyNames)| {
                t.get_layout(parentId, recursionDepth, propertyNames)
            },
        );
        b.method(
            "GetGroupProperties",
            ("ids", "propertyNames"),
            ("properties",),
            |_, t: &mut T, (ids, propertyNames)| {
                t.get_group_properties(ids, propertyNames).map(|x| (x,))
            },
        );
        b.method(
            "GetProperty",
            ("id", "name"),
            ("value",),
            |_, t: &mut T, (id, name)| t.get_property(id, name).map(|x| (x,)),
        );
        b.method(
            "Event",
            ("id", "eventId", "data", "timestamp"),
            (),
            |_, t: &mut T, (id, eventId, data, timestamp)| t.event(id, eventId, data, timestamp),
        );
        b.method(
            "EventGroup",
            ("events",),
            ("idErrors",),
            |_, t: &mut T, (events,)| t.event_group(events).map(|x| (x,)),
        );
        b.method(
            "AboutToShow",
            ("id",),
            ("needUpdate",),
            |_, t: &mut T, (id,)| t.about_to_show(id).map(|x| (x,)),
        );
        b.method(
            "AboutToShowGroup",
            ("ids",),
            ("updatesNeeded", "idErrors"),
            |_, t: &mut T, (ids,)| t.about_to_show_group(ids),
        );
        b.property::<u32, _>("Version").get(|_, t| t.version());
        b.property::<String, _>("TextDirection")
            .get(|_, t| t.text_direction());
        b.property::<String, _>("Status").get(|_, t| t.status());
        b.property::<Vec<String>, _>("IconThemePath")
            .get(|_, t| t.icon_theme_path());
    })
}
