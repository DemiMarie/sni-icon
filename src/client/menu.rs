// This code was autogenerated with `dbus-codegen-rust -c nonblock --file=./dbus-menu.xml --skipprefix=com.canonical --output ./src/client/menu.rs`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait Dbusmenu {
    fn get_layout(
        &self,
        parent_id: i32,
        recursion_depth: i32,
        property_names: Vec<&str>,
    ) -> nonblock::MethodReply<(
        u32,
        (
            i32,
            arg::PropMap,
            Vec<arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        ),
    )>;
    fn get_group_properties(
        &self,
        ids: Vec<i32>,
        property_names: Vec<&str>,
    ) -> nonblock::MethodReply<Vec<(i32, arg::PropMap)>>;
    fn get_property(
        &self,
        id: i32,
        name: &str,
    ) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>>;
    fn event(
        &self,
        id: i32,
        event_id: &str,
        data: arg::Variant<Box<dyn arg::RefArg>>,
        timestamp: u32,
    ) -> nonblock::MethodReply<()>;
    fn event_group(
        &self,
        events: Vec<(i32, &str, arg::Variant<Box<dyn arg::RefArg>>, u32)>,
    ) -> nonblock::MethodReply<Vec<i32>>;
    fn about_to_show(&self, id: i32) -> nonblock::MethodReply<bool>;
    fn about_to_show_group(&self, ids: Vec<i32>) -> nonblock::MethodReply<(Vec<i32>, Vec<i32>)>;
    fn version(&self) -> nonblock::MethodReply<u32>;
    fn text_direction(&self) -> nonblock::MethodReply<String>;
    fn status(&self) -> nonblock::MethodReply<String>;
    fn icon_theme_path(&self) -> nonblock::MethodReply<Vec<String>>;
}

#[derive(Debug)]
pub struct DbusmenuItemsPropertiesUpdated {
    pub updated_props: Vec<(i32, arg::PropMap)>,
    pub removed_props: Vec<(i32, Vec<String>)>,
}

impl arg::AppendAll for DbusmenuItemsPropertiesUpdated {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.updated_props, i);
        arg::RefArg::append(&self.removed_props, i);
    }
}

impl arg::ReadAll for DbusmenuItemsPropertiesUpdated {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DbusmenuItemsPropertiesUpdated {
            updated_props: i.read()?,
            removed_props: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DbusmenuItemsPropertiesUpdated {
    const NAME: &'static str = "ItemsPropertiesUpdated";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

#[derive(Debug)]
pub struct DbusmenuLayoutUpdated {
    pub revision: u32,
    pub parent: i32,
}

impl arg::AppendAll for DbusmenuLayoutUpdated {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.revision, i);
        arg::RefArg::append(&self.parent, i);
    }
}

impl arg::ReadAll for DbusmenuLayoutUpdated {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DbusmenuLayoutUpdated {
            revision: i.read()?,
            parent: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DbusmenuLayoutUpdated {
    const NAME: &'static str = "LayoutUpdated";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

#[derive(Debug)]
pub struct DbusmenuItemActivationRequested {
    pub id: i32,
    pub timestamp: u32,
}

impl arg::AppendAll for DbusmenuItemActivationRequested {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.id, i);
        arg::RefArg::append(&self.timestamp, i);
    }
}

impl arg::ReadAll for DbusmenuItemActivationRequested {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DbusmenuItemActivationRequested {
            id: i.read()?,
            timestamp: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DbusmenuItemActivationRequested {
    const NAME: &'static str = "ItemActivationRequested";
    const INTERFACE: &'static str = "com.canonical.dbusmenu";
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Dbusmenu
    for nonblock::Proxy<'a, C>
{
    fn get_layout(
        &self,
        parent_id: i32,
        recursion_depth: i32,
        property_names: Vec<&str>,
    ) -> nonblock::MethodReply<(
        u32,
        (
            i32,
            arg::PropMap,
            Vec<arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        ),
    )> {
        self.method_call(
            "com.canonical.dbusmenu",
            "GetLayout",
            (parent_id, recursion_depth, property_names),
        )
    }

    fn get_group_properties(
        &self,
        ids: Vec<i32>,
        property_names: Vec<&str>,
    ) -> nonblock::MethodReply<Vec<(i32, arg::PropMap)>> {
        self.method_call(
            "com.canonical.dbusmenu",
            "GetGroupProperties",
            (ids, property_names),
        )
        .and_then(|r: (Vec<(i32, arg::PropMap)>,)| Ok(r.0))
    }

    fn get_property(
        &self,
        id: i32,
        name: &str,
    ) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>> {
        self.method_call("com.canonical.dbusmenu", "GetProperty", (id, name))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>,)| Ok(r.0))
    }

    fn event(
        &self,
        id: i32,
        event_id: &str,
        data: arg::Variant<Box<dyn arg::RefArg>>,
        timestamp: u32,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "com.canonical.dbusmenu",
            "Event",
            (id, event_id, data, timestamp),
        )
    }

    fn event_group(
        &self,
        events: Vec<(i32, &str, arg::Variant<Box<dyn arg::RefArg>>, u32)>,
    ) -> nonblock::MethodReply<Vec<i32>> {
        self.method_call("com.canonical.dbusmenu", "EventGroup", (events,))
            .and_then(|r: (Vec<i32>,)| Ok(r.0))
    }

    fn about_to_show(&self, id: i32) -> nonblock::MethodReply<bool> {
        self.method_call("com.canonical.dbusmenu", "AboutToShow", (id,))
            .and_then(|r: (bool,)| Ok(r.0))
    }

    fn about_to_show_group(&self, ids: Vec<i32>) -> nonblock::MethodReply<(Vec<i32>, Vec<i32>)> {
        self.method_call("com.canonical.dbusmenu", "AboutToShowGroup", (ids,))
    }

    fn version(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.canonical.dbusmenu",
            "Version",
        )
    }

    fn text_direction(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.canonical.dbusmenu",
            "TextDirection",
        )
    }

    fn status(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.canonical.dbusmenu",
            "Status",
        )
    }

    fn icon_theme_path(&self) -> nonblock::MethodReply<Vec<String>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "com.canonical.dbusmenu",
            "IconThemePath",
        )
    }
}
