// This code was autogenerated with `dbus-codegen-rust -c nonblock --file ./org.kde.StatusNotifierItem.xml --skipprefix=org.kde --output ./src/client/item.rs`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait StatusNotifierItem {
    fn context_menu(&self, x_: i32, y_: i32) -> nonblock::MethodReply<()>;
    fn activate(&self, x_: i32, y_: i32) -> nonblock::MethodReply<()>;
    fn secondary_activate(&self, x_: i32, y_: i32) -> nonblock::MethodReply<()>;
    fn scroll(&self, delta: i32, orientation: &str) -> nonblock::MethodReply<()>;
    fn category(&self) -> nonblock::MethodReply<String>;
    fn id(&self) -> nonblock::MethodReply<String>;
    fn title(&self) -> nonblock::MethodReply<String>;
    fn status(&self) -> nonblock::MethodReply<String>;
    fn window_id(&self) -> nonblock::MethodReply<i32>;
    fn icon_theme_path(&self) -> nonblock::MethodReply<String>;
    fn menu(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn item_is_menu(&self) -> nonblock::MethodReply<bool>;
    fn icon_name(&self) -> nonblock::MethodReply<String>;
    fn icon_pixmap(&self) -> nonblock::MethodReply<Vec<(i32, i32, Vec<u8>)>>;
    fn overlay_icon_name(&self) -> nonblock::MethodReply<String>;
    fn overlay_icon_pixmap(&self) -> nonblock::MethodReply<Vec<(i32, i32, Vec<u8>)>>;
    fn attention_icon_name(&self) -> nonblock::MethodReply<String>;
    fn attention_icon_pixmap(&self) -> nonblock::MethodReply<Vec<(i32, i32, Vec<u8>)>>;
    fn attention_movie_name(&self) -> nonblock::MethodReply<String>;
    fn tool_tip(&self)
        -> nonblock::MethodReply<(String, Vec<(i32, i32, Vec<u8>)>, String, String)>;
}

#[derive(Debug)]
pub struct StatusNotifierItemNewTitle {}

impl arg::AppendAll for StatusNotifierItemNewTitle {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewTitle {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewTitle {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewTitle {
    const NAME: &'static str = "NewTitle";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewIcon {}

impl arg::AppendAll for StatusNotifierItemNewIcon {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewIcon {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewIcon {
    const NAME: &'static str = "NewIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewAttentionIcon {}

impl arg::AppendAll for StatusNotifierItemNewAttentionIcon {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewAttentionIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewAttentionIcon {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewAttentionIcon {
    const NAME: &'static str = "NewAttentionIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewOverlayIcon {}

impl arg::AppendAll for StatusNotifierItemNewOverlayIcon {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewOverlayIcon {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewOverlayIcon {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewOverlayIcon {
    const NAME: &'static str = "NewOverlayIcon";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewToolTip {}

impl arg::AppendAll for StatusNotifierItemNewToolTip {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierItemNewToolTip {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewToolTip {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewToolTip {
    const NAME: &'static str = "NewToolTip";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

#[derive(Debug)]
pub struct StatusNotifierItemNewStatus {
    pub status: String,
}

impl arg::AppendAll for StatusNotifierItemNewStatus {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.status, i);
    }
}

impl arg::ReadAll for StatusNotifierItemNewStatus {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierItemNewStatus { status: i.read()? })
    }
}

impl dbus::message::SignalArgs for StatusNotifierItemNewStatus {
    const NAME: &'static str = "NewStatus";
    const INTERFACE: &'static str = "org.kde.StatusNotifierItem";
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> StatusNotifierItem
    for nonblock::Proxy<'a, C>
{
    fn context_menu(&self, x_: i32, y_: i32) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.StatusNotifierItem", "ContextMenu", (x_, y_))
    }

    fn activate(&self, x_: i32, y_: i32) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.StatusNotifierItem", "Activate", (x_, y_))
    }

    fn secondary_activate(&self, x_: i32, y_: i32) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.StatusNotifierItem", "SecondaryActivate", (x_, y_))
    }

    fn scroll(&self, delta: i32, orientation: &str) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.StatusNotifierItem", "Scroll", (delta, orientation))
    }

    fn category(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "Category",
        )
    }

    fn id(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "Id",
        )
    }

    fn title(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "Title",
        )
    }

    fn status(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "Status",
        )
    }

    fn window_id(&self) -> nonblock::MethodReply<i32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "WindowId",
        )
    }

    fn icon_theme_path(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "IconThemePath",
        )
    }

    fn menu(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "Menu",
        )
    }

    fn item_is_menu(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "ItemIsMenu",
        )
    }

    fn icon_name(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "IconName",
        )
    }

    fn icon_pixmap(&self) -> nonblock::MethodReply<Vec<(i32, i32, Vec<u8>)>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "IconPixmap",
        )
    }

    fn overlay_icon_name(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "OverlayIconName",
        )
    }

    fn overlay_icon_pixmap(&self) -> nonblock::MethodReply<Vec<(i32, i32, Vec<u8>)>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "OverlayIconPixmap",
        )
    }

    fn attention_icon_name(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "AttentionIconName",
        )
    }

    fn attention_icon_pixmap(&self) -> nonblock::MethodReply<Vec<(i32, i32, Vec<u8>)>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "AttentionIconPixmap",
        )
    }

    fn attention_movie_name(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "AttentionMovieName",
        )
    }

    fn tool_tip(
        &self,
    ) -> nonblock::MethodReply<(String, Vec<(i32, i32, Vec<u8>)>, String, String)> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierItem",
            "ToolTip",
        )
    }
}
