// This code was autogenerated with `dbus-codegen-rust -c blocking -i org.kde`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait StatusNotifierWatcher {
    fn register_status_notifier_item(&self, service: &str) -> Result<(), dbus::Error>;
    fn register_status_notifier_host(&self, service: &str) -> Result<(), dbus::Error>;
    fn registered_status_notifier_items(&self) -> Result<Vec<String>, dbus::Error>;
    fn is_status_notifier_host_registered(&self) -> Result<bool, dbus::Error>;
    fn protocol_version(&self) -> Result<i32, dbus::Error>;
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierItemRegistered {
    pub arg0: String,
}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierItemRegistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierItemRegistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierItemRegistered { arg0: i.read()? })
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierItemRegistered {
    const NAME: &'static str = "StatusNotifierItemRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierItemUnregistered {
    pub arg0: String,
}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierItemUnregistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierItemUnregistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierItemUnregistered { arg0: i.read()? })
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierItemUnregistered {
    const NAME: &'static str = "StatusNotifierItemUnregistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierHostRegistered {}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierHostRegistered {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierHostRegistered {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierHostRegistered {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierHostRegistered {
    const NAME: &'static str = "StatusNotifierHostRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct StatusNotifierWatcherStatusNotifierHostUnregistered {}

impl arg::AppendAll for StatusNotifierWatcherStatusNotifierHostUnregistered {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for StatusNotifierWatcherStatusNotifierHostUnregistered {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(StatusNotifierWatcherStatusNotifierHostUnregistered {})
    }
}

impl dbus::message::SignalArgs for StatusNotifierWatcherStatusNotifierHostUnregistered {
    const NAME: &'static str = "StatusNotifierHostUnregistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> StatusNotifierWatcher
    for blocking::Proxy<'a, C>
{
    fn register_status_notifier_item(&self, service: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.kde.StatusNotifierWatcher",
            "RegisterStatusNotifierItem",
            (service,),
        )
    }

    fn register_status_notifier_host(&self, service: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.kde.StatusNotifierWatcher",
            "RegisterStatusNotifierHost",
            (service,),
        )
    }

    fn registered_status_notifier_items(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierWatcher",
            "RegisteredStatusNotifierItems",
        )
    }

    fn is_status_notifier_host_registered(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierWatcher",
            "IsStatusNotifierHostRegistered",
        )
    }

    fn protocol_version(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.kde.StatusNotifierWatcher",
            "ProtocolVersion",
        )
    }
}
